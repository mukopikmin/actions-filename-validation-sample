# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@477b21f02be01bcb8030d50f37cfec92bfa615b6
        with:
          ruby-version: 2.7
        # no need to specify `fetch-depth`, let it default to most recent commit only.
      - name: Fetch and Diff PR with base from which it was cloned
        # git fetch will fail if ${{ github.event.pull_request.base.sha }} is not set.
        # ${{ github.event.pull_request.base.sha }} WILL be set for event `pull_request`
        if: ${{ github.event.pull_request.base.sha }}  
        run: |
          git fetch origin ${{ github.base_ref }} ${{ github.event.pull_request.base.sha }}
          git branch
          mkdir ${{ github.base_ref }}
          cp files/* ${{ github.base_ref }}/

          git branch
          git checkout ${{ github.event.pull_request.base.sha }}
          cp files/* ${{ github.event.pull_request.base.sha }}
      - name: ruby
        run: |
          ruby -e "
            require 'digest/md5'

            files1 = Dir.glob('files1/*').map { |f| File.basename(f) }
            files2 = Dir.glob('files2/*').map { |f| File.basename(f) }
            files = files1.concat(files2)

            files.map { |f| f.split('_') }
                .each_with_object({}) { |cur, acc| acc[cur[0]] = [*acc[cur[0]], cur[1]].uniq }
                .filter { |_k, v| v.size != 1 }
                .each { |k, v| p \"Duplicate file #{k}_#{v[0]}\" }
          "
